Some random notes on infiles (infile.c):

* Infiles also have a notion of "newness," see taskdb.txt.

* If infile->len == -1ull, this is a tombstone entry indicating that the file
  doesn't actually exist (or is inaccessible).

* If a task tells build about an infile that has never been seen before, an
  entry will be created with the current global newness value.

* When determining whether to rerun a task (if its dependencies all haven't
  changed), its infiles will be checked. This involves stat()ing the actual file
  and comparing the new information against the old. If there is any difference,
  the infile will have its newness updated, which will also indicate that the
  task needs updated.

* Build will only check a given infile once per run, then cache the same newness
  value.

* Oh, and if an infile already has a higher newness than a task, the underlying
  file doesn't need to be stat()ed either.

[ [  T H E   A C T U A L   I N F O R M A T I O N   B E I N G   S T O R E D  ] ]

We don't just compare timestamps like Make or Ninja or whatever; see for example
https://apenwarr.ca/log/20181113.

But in fact, we go a step further and don't care about timestamps at all! This
way just touching a file won't cause a rebuild for no reason.

Instead, we only store things that definitely indicate a change in either
content or access to the file: length, inode number, mode, uid, and gid.

Since text editors pretty much all atomically save via rename to avoid data
loss, the inode number alone is usually enough to detect a change. If the file
in question was written to in some other way then maybe not, but we still have
the length as a fallback. The user, group and mode are just there to ensure that
permissions changes that would affect the success of using the file *do* have an
effect on the build, particularly in enabling something to be run if it
initially wasn't +x'd.

The only possible false negative is if some big blob is edited using some tool
that writes directly out to disk and that same blob also doesn't change in
length at all. That seems unlikely, but it's a bridge that can be crossed later
with the planned file-watching stuff.

Other stuff that could be used, but isn't:
* atime (changes on *read*, shouldn't even exist in the OS)
* ctime (driven by the stat metadata we're already checking)
* birthtime (requires idiotic linux effort; mostly redundant to inode changes)
* content hash (may be too slow, would otherwise replace *everything* else)

Appendix: infile-ing directories

This works! Build doesn't stop you! This might or might not be useful for some
things. One possible use case: mark a path as an infile, then if it's a file,
hand it off to a task, and if it's a directory, mark everything in it as an
infile, and keep doing that recursively. Now you have glob()ular dependencies,
which might be useful for building Java or Go (or something else which just
builds a whole tree of stuff at once).

Generally, *I* prefer having fixed lists of files for a few different reasons,
but you aren't forced to agree with this preference!
