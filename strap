#!/bin/sh -e

. scripts/lib.sh
if [ "$CC" != "" ]; then cc="$CC"; else . scripts/cc-pick.sh; fi
. scripts/cc-target.sh
. scripts/cc-info.sh

# Manage expectations!
case "$target_os" in
	linux) ;; linux_musl) ;; freebsd) ;; netbsd) ;; openbsd) ;;
	macos)
		warn "warning: macOS is known to be a really BAD Unix implementation!"
		warn "         it is also currently totally untested - expect issues!" ;;
	unknown)
		warn "warning: build is not tested on your OS, so you may have issues..."
		warn "* let me know how it goes! *" ;;
	*)
		warn "heads up: this OS has yet to be tested, but should work in theory."
		warn "* let me know how you get on! *" ;;
esac

warn "note: compiling unoptimised bootstrap version"
warn "      this will take a moment because modern compilers are ridiculously slow"

cflags="-O0 -w -fpic"
ldflags="-O0"
test_cflags=

. scripts/find-cpoly.sh

mkdir -p build/strap/bin build/strap/lib

num_items=4 # ‚Üê remember to change this manually
is_tty && printf "[0/$num_items] build " || :
extrasrc=""
if [ "$cpoly_use_bundled" = 1 ]; then
	extrasrc="
libcpoly/src/arc4random/arc4random.c
libcpoly/src/progname.c
libcpoly/src/reallocarray.c
libcpoly/src/strchrnul.c
libcpoly/src/strtonum.c"
fi
$cc $cflags $cpoly_cflags $ldflags $cpoly_ldflags \
-Icbits/include \
src/build.c \
src/db.c \
src/db-strpool.c \
src/evloop.c \
src/fpath.c \
src/fd.c \
src/infile.c \
src/ipcserver.c \
src/proc.c \
src/sigstr.c \
src/task.c \
src/time.c \
src/tui.c \
cbits/src/errmsg.c \
cbits/src/errorstring.c \
cbits/src/fmt.c \
cbits/src/iobuf.c \
cbits/src/path.c $extrasrc \
-o build/strap/bin/build

is_tty && printf "\r[K[1/$num_items] libbuild " || :
extrasrc=""
if [ "$cpoly_use_bundled" = 1 ]; then
	extrasrc="
libcpoly/src/progname.c"
fi
$cc -shared $cflags $cpoly_cflags $ldflags $cpoly_ldflags \
-fvisibility=hidden \
-Icbits/include \
src/ipcclient.c \
src/libbuild.c \
cbits/src/errmsg.c \
cbits/src/errorstring.c \
cbits/src/iobuf.c $extrasrc \
-o build/strap/lib/libbuild.so

is_tty && printf "\r[K[2/$num_items] build-dep " || :
extrasrc=""
if [ "$cpoly_use_bundled" = 1 ]; then
	extrasrc="
libcpoly/src/progname.c"
fi
$cc $cflags $cpoly_cflags $ldflags $cpoly_ldflags \
-Icbits/include \
-Lbuild/strap/lib -lbuild \
src/build-dep.c \
cbits/src/errmsg.c \
cbits/src/errorstring.c \
cbits/src/iobuf.c $extrasrc \
-o build/strap/bin/build-dep

is_tty && printf "\r[K[3/$num_items] build-infile " || :
extrasrc=""
if [ "$cpoly_use_bundled" = 1 ]; then
	extrasrc="
libcpoly/src/progname.c"
fi
$cc $cflags $cpoly_cflags $ldflags $cpoly_ldflags \
-Icbits/include \
-Lbuild/strap/lib -lbuild \
src/build-infile.c \
cbits/src/errmsg.c \
cbits/src/errorstring.c \
cbits/src/iobuf.c $extrasrc \
-o build/strap/bin/build-infile

is_tty && printf "\r[K[3/$num_items] build-tasktitle " || :
extrasrc=""
if [ "$cpoly_use_bundled" = 1 ]; then
	extrasrc="
libcpoly/src/progname.c"
fi
$cc $cflags $cpoly_cflags $ldflags $cpoly_ldflags \
-Icbits/include \
-Lbuild/strap/lib -lbuild \
src/build-tasktitle.c \
cbits/src/errmsg.c \
cbits/src/errorstring.c \
cbits/src/iobuf.c $extrasrc \
-o build/strap/bin/build-tasktitle
is_tty && printf "\r[K" || :

# note: this step sort of precludes cross-compiling from strap, but that's okay,
# we can bootstrap locally and use that to cross-compile to elsewhere!)
warn "note: now confirming that build works by using it to build itself!"
(
	export LD_LIBRARY_PATH="build/strap/lib:$LD_LIBRARY_PATH"
	export PATH="build/strap/bin:$PATH"
	# blegh
	if [ "$CC" = "" ]; then
		exec build
	else
		exec build ./Buildfile cc="$cc"
	fi
)

full_build_dir="build/$target_os-$target_arch-$cc_type-$cc_ver"
warn "success! installation files are in $full_build_dir/out"
warn "         you can also invoke build without installing using ./runbuild"

# vi: sw=4 ts=4 noet tw=80 cc=80
