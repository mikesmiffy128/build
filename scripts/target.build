#!/bin/sh -e
build-infile scripts/lib.sh
. scripts/lib.sh

targetfile="scripts/$1.target"
build_dir="$2"
cc="$3"
cc_type="$4"
target_os="$5"
shift 5 # let targets take extra params (eg lbuild takes lua version)

build-dep scripts/conf.build "$build_dir" "$cc" "$cc_type" "$target_os"
. "$build_dir/config"

srcconf() { :; } # default: nothing special
build-infile "$targetfile"
. "$targetfile"

build-tasktitle "TARGET $out"

set -- # use the shell's single array for object file names
for s in $src; do
	__cflags="$cflags"
	srcconf "$s" # allow per-file cflags (used by lbuild)
	# hash the flags, so multiple configurations of eg lbuild produce different
	# objects (truncate said hash a bit to avoid unwieldiness)
	build-infile scripts/sha1
	sha1="`printf %s "$cflags" | scripts/sha1 | cut -c -8`"
	if [ "$sha1" = "" ]; then exit 1; fi # sigh, no pipefail
	o="$build_dir/`echo "${s%%.c}" | sed -e s@src/@@g -e s@/@:@g`:$sha1.o"
	set -- "$@" "$o"
	build-dep -n scripts/cc.build "$build_dir" "$cc" "-c $cflags" "$s" "$o"
	cflags="$__cflags"
done
# wait for required libraries (ie libbuild) - assume same configuration for those
for d in $libs; do
	build-dep -n scripts/target.build "$d" "$build_dir" "$cc" "$cc_type" "$target_os"
done
build-dep -w

mkdir -p "$build_dir/out/`dirname "$out"`"
# XXX unconditionally passing -Lbuild/out/lib here because I couldn't be
# bothered figuring out the shell quoting nonsense to get paths with spaces to
# pass properly via an ldflags variable - doesn't *really* matter that much
$cc $ldflags -L"$build_dir/out/lib" -o "$build_dir/out/$out" "$@"

# vi: sw=4 ts=4 noet tw=80 cc=80
